# -*- coding: utf-8 -*-
"""tictactoe_isys.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1bJtMltSjOJ7Vif0l5M21gzXM6gddajRX
"""

import random

#Zerésimo turno: Quadro em branco
def print_board(board):
    print('-------------')
    for i in range(3): #itera sobre as linhas
        print('|', board[i][0], '|', board[i][1], '|', board[i][2], '|')
        print('-------------')


#verifica linhas, colunas e diagonais para determinar se há três peças iguais
def is_winner(board, player):
    """
     Itera sobre as linhas;
     1a condicional que verifica se há três símbolos consecutivos iguais em cada linha ou coluna;
     2a condicional que verifica se há três símbolos consecutivos iguais na diagonal principal ou diagonal secundária.

     board: tabuleiro
     player: X ou O
    """
    for i in range(3):
        if (board[i][0] == player and board[i][1] == player and board[i][2] == player) or \
           (board[0][i] == player and board[1][i] == player and board[2][i] == player):
            return True
    if (board[0][0] == player and board[1][1] == player and board[2][2] == player) or \
       (board[0][2] == player and board[1][1] == player and board[2][0] == player):
        return True
    return False

def get_bot_move(board, bot_player):
    """  
      Repete o processo de escolha de movimento do bot até que ele escolha uma posição válida no tabuleiro;
      Gera aleatoriamente uma linha e uma coluna no tabuleiro usando a biblioteca "random";
      Verifica se o elemento correspondente na matriz do tabuleiro é igual a um espaço em branco (' ');
      Se a posição selecionada estiver vazia, define o elemento correspondente na matriz como o símbolo do jogador do bot e encerra o loop;
      Se a posição selecionada não estiver vazia, o loop "while" continua e a função seleciona outra posição aleatória.
    """
    while True: 
        row = random.randint(0, 2)
        col = random.randint(0, 2)
        if board[row][col] == ' ':
            board[row][col] = bot_player
            break


def play():
    """ 
      Repete o processo do jogo até que haja um vencedor ou empate;
      Verifica se há um vencedor usando a função "is_winner";
      Obtem um movimento válido para o jogador atual usando a função "get_bot_move";
      "turn" é atualizada para alternar entre os jogadores, usando a operação de módulo (%) para obter o índice do próximo jogador na lista de jogadores;
      Por fim, se todas as células do tabuleiro estiverem preenchidas e ainda não houver um vencedor, imprime "Tie game!".

      board: define um tabuleiro vazio, representado como uma matriz de 3x3, com todos os elementos iniciais definidos como espaços em branco;
      players: define uma lista de dois jogadores, 'X' e 'O'
      turn: define um contador de turno igual a 0. 

    """
    
    board = [[' ', ' ', ' '], [' ', ' ', ' '], [' ', ' ', ' ']]
    players = ['X', 'O'] 
    turn = 0  
    while True: 
        print_board(board)
        player = players[turn]
        if is_winner(board, player): 
            print(player + ' wins!')
            break
        if turn == 0: 
            get_bot_move(board, player) 
        else:
            get_bot_move(board, player)
        turn = (turn + 1) % 2 
        if all([cell != ' ' for row in board for cell in row]): 
            print('Tie game!')
            break

 
## Para iniciar o jogo, basta dar o comando play()

play()